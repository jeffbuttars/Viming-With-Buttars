

##########
# COMMON #
##########

# The smart def and smart class snippets use a global option called
# "g:ultisnips_python_style" which, if set to "doxygen" will use doxygen
# style comments in docstrings.

global !p

NORMAL  = 0x1
DOXYGEN = 0x2

def get_args(arglist):
    args = [arg.split('=')[0].strip() for arg in arglist.split(',') if arg]
    args = [arg for arg in args if arg and arg != "self"]

    return args


def get_style(snip):
    style = snip.opt("g:ultisnips_python_style", "normal")

    if    style == "doxygen": return DOXYGEN
    else: return NORMAL


def format_arg(arg, style):
    if style == DOXYGEN:
        return "@param %s @todo" % arg
    elif style == NORMAL:
        return ":%s: @todo" % arg


def format_return(style):
    if style == DOXYGEN:
        return "@return: @todo"
    elif style == NORMAL:
        return ":returns: @todo"


def write_docstring_args(args, snip):
    if not args:
        snip.rv += ' """'
        return

    snip += ""

    style = get_style(snip)

    for arg in args:
        snip += format_arg(arg, style)


def write_init_body(args, parents, snip):
    parents = [p.strip() for p in parents.split(",")]
    parents = [p for p in parents if p != 'object']

    for p in parents:
        snip += p + ".__init__(self)"

    if parents:
        snip += ""

    for arg in args:
        snip += "self._%s = %s" % (arg, arg)


def write_slots_args(args, snip):
    args = ['"%s"' % arg for arg in args]
    snip += '__slots__ = (%s,)' % ', '.join(args)

endglobal


# Ifs
snippet if "Simple if :"
if ${1:condition}:
    $0    
endsnippet

snippet el "Simple else:"
else:
    $0
endsnippet

snippet ei "Simple elif:"
elif ${1:condition}:
    $0
endsnippet

snippet pr "print()"
print($0)
endsnippet

snippet pra "print() with args"
print("${1}%s" % (${2},${3}))$0
endsnippet

snippet cl "class with docstrings" b
class ${1:MyClass}(${2:object}):
	"""${3:Docstring for $1 }"""

	def __init__(self$4):
		"""${5:@todo: to be defined}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args: snip += '"""'


snip += ""
write_init_body(args, t[2], snip)
`
		$0
#$1
endsnippet

snippet def "my function with docstrings" !b
def ${1:function}(`!p
if snip.indent:
   snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	"""${4:@todo: Docstring for $1}`!p
snip.rv = ""
snip >> 1

args = get_args(t[2])
if args:
   write_docstring_args(args, snip)

style = get_style(snip)
snip += format_return(style)
snip += '"""' `

	${5:pass}
#$1()${0}
endsnippet

snippet logger "Add a named logging logger" b
import logging

# Set up the logger
logger = logging.getLogger(${1:__name__})
# Use a console handler, set it to debug by default
logger_ch = logging.StreamHandler()
logger.setLevel(logging.DEBUG)
log_formatter = logging.Formatter(('%(asctime)s %(levelname)s:%(process)s'
                                   ' %(funcName)s() %(message)s'))
logger_ch.setFormatter(log_formatter)
logger.addHandler(logger_ch)${0}
endsnippet

snippet im "Import shortcut" b
import ${0}
endsnippet

snippet ima "Import as shortcut" b
import ${1} as ${0}
endsnippet

snippet fim "From pkg Import sub" b
from ${1} import ${0}
endsnippet

snippet for "For" b
for ${1} in ${2}:
    ${3}
# end for $1 in $2
${0}
endsnippet

#snippet if "if" b
#if ${1}:
#    ${0}
#endsnippet

snippet el "else" b
else ${1}:
    ${0}
endsnippet

snippet ifel "if else" b
if ${1}:
    ${2}
else ${3}:
    ${0}
endsnippet

snippet cl "class with docstrings" !b
class ${1:MyClass}(${2:object}):
	"""${3:Docstring for $1 }"""

	def __init__(self$4):
		"""${5:@todo: to be defined}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args: snip += '"""'


snip += ""
write_init_body(args, t[2], snip)
`
    #__init__()
		$0
#$1
endsnippet

snippet ldbg "logger.debug()"
logger.debug(${1})${0}
endsnippet

snippet lerr "logger.error()"
logger.error(${1})${0}
endsnippet

snippet lwrn "logger.warning()"
logger.warning(${1})${0}
endsnippet

snippet linf "logger.info()"
logger.info(${1})${0}
endsnippet

# vim:ft=snippets:
