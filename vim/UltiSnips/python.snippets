extends python
priority 1


##########
# COMMON #
##########

# The smart def and smart class snippets use a global option called
# "g:ultisnips_python_style" which, if set to "doxygen" will use doxygen
# style comments in docstrings.



global !p

NORMAL  = 0x1
DOXYGEN = 0x2
RST = 0x3

import vim
def find_def_name(ident):

    cp = vim.eval('getpos(".")')

    # Find the nearest def
    vim.eval("searchpos('" + ident + "', 'b')")

    # Get the name of the def/method/etc.  
    vim.command('execute "normal W"')
    dname = vim.eval("expand('<cword>')")
    vim.command("call setpos('.', " + str(cp) + ")")

    return dname

def get_nearest_def_args(ident='def', strip_self=False):
    cp = vim.eval('getpos(".")')

    # Find the nearest def
    vim.eval("searchpos('" + ident + "', 'b')")
    spos = int(vim.eval("searchpos('(')")[1])
    epos = int(vim.eval("searchpos(')')")[1])
    line = vim.eval("getline('.')")
    args = line[spos:epos-1]
    args = args.strip()

    if strip_self:
        if args.startswith('self'):
            args = args[4:]
            args = args[args.find(',')+1:]
            args = args.strip()

    # Break up the args and remove any default arguments.
    args = args.split(',')

    nargs = []
    for arg in args:
        arg = arg.strip()
        parts = arg.split('=', 1)
        nargs.append(parts[0])
    # end for arg in args

    vim.command("call setpos('.', " + str(cp) + ")")

    return ', '.join(nargs)

def get_args(arglist):
    args = [arg.split('=')[0].strip() for arg in arglist.split(',') if arg]
    args = [arg for arg in args if arg and arg != "self"]

    return args


def get_style(snip):
    style = snip.opt("g:ultisnips_python_style", "normal")

    if    style == "doxygen": return DOXYGEN
    elif style == 'rst': return RST
    else: return NORMAL


def format_arg(arg, style, snip):
    if style == DOXYGEN:
        return "@param %s @todo" % arg
    elif style == RST:
        return (":param %s: arg description\n"
                "%s:type %s: type description") % (arg, snip.indent, arg)
    elif style == NORMAL:
        return ":%s: @todo" % arg


def format_return(style, snip):
    if style == DOXYGEN:
        return "@return: @todo"
    elif style == RST:
        return (":return:\n%s:rtype:") % snip
    elif style == NORMAL:
        return ":returns: @todo"


def write_docstring_args(args, snip):
    if not args:
        snip.rv += ' """'
        return

    snip += ""

    style = get_style(snip)

    for arg in args:
        snip += format_arg(arg, style, snip)


def write_init_body(args, snip):
    #parents = [p.strip() for p in parents.split(",")]
    #parents = [p for p in parents if p != 'object']

    cname = find_def_name('class')
    parents = get_nearest_def_args(ident='class')
    if parents and parents != 'object':
        arglist = ', '.join(args)
        snip += "super(" + cname + ", self).__init__(" + arglist + ")"
        #snip += ""

    for arg in args:
        snip += "self._%s = %s" % (arg, arg)


def write_slots_args(args, snip):
    args = ['"%s"' % arg for arg in args]
    snip += '__slots__ = (%s,)' % ', '.join(args)

def get_arg_names(log_str):
    names = [log_str.split(':')[0].strip() for arg in log_str.split(',') if arg]
    return names

endglobal


# Ifs
snippet if "Simple if :" b!
if ${1:condition}:
    $0    
endsnippet

snippet el "Simple else:" b!
else:
    $0
endsnippet

snippet ei "Simple elif:" b!
elif ${1:condition}:
    $0
endsnippet

snippet pr "print()" b!
print($0)
endsnippet

snippet pra "print() with args"
print("${1}%s" % (${2},${3}))$0
endsnippet

snippet def "my function with docstrings"  !b
def ${1:function}(`!p
if snip.indent:
   snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	"""${4:todo: Docstring for $1}`!p
snip.rv <= ""
snip >> 1

args = get_args(t[2])
if args:
   write_docstring_args(args, snip)

style = get_style(snip)
snip += format_return(style, snip.indent)
snip += '"""' `

	${5:pass}
endsnippet


snippet _def "my __function__ with docstrings" bs!
def __${1:function}__(`!p
if snip.indent:
   snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	"""${4:todo: Docstring for __$1__}`!p
snip.rv <= ""
snip >> 1

args = get_args(t[2])
if args:
   write_docstring_args(args, snip)

style = get_style(snip)
snip += format_return(style, snip.indent)
snip += '"""' `

	${5:pass}
endsnippet

snippet deft "my test function with docstrings" !bs
def test_${1:function}(self):
	"""${2:todo: Docstring for $1}"""
	${3:pass}
endsnippet

snippet logger "Add a named logging logger" !bs
import logging

# Set up the logger
logger = logging.getLogger(${1:__name__})
# Use a console handler, set it to debug by default
logger_ch = logging.StreamHandler()
logger.setLevel(logging.DEBUG)
log_formatter = logging.Formatter(('%(levelname)s: %(asctime)s %(processName)s:%(process)d'
                                   ' %(filename)s:%(lineno)s %(module)s::%(funcName)s()'
                                   ' -- %(message)s'))
logger_ch.setFormatter(log_formatter)
logger.addHandler(logger_ch)${0}
endsnippet


snippet glogger "Get a logger" !bs
import logging
logger = logging.getLogger('${1:__name__}')${0}
endsnippet

snippet im "Import shortcut" b
import ${0}
endsnippet

snippet ima "Import as shortcut" b
import ${1} as ${0}
endsnippet

snippet fim "From pkg Import sub" b
from ${1} import ${0}
endsnippet

snippet for "For" !bs
for ${1} in ${2}:
    ${3}
${0}
endsnippet

#snippet if "if" b
#if ${1}:
#    ${0}
#endsnippet

snippet el "else" !bs
else ${1}:
    ${0}
endsnippet

snippet ifel "if else" !bs
if ${1}:
    ${2}
else ${3}:
    ${0}
endsnippet


snippet init "Class __init__" !bs
def __init__(self${1}):
    """${2:todo: to be defined}`!p
snip.rv <= ""
snip >> 1

args = get_args(t[1])

write_docstring_args(args, snip)
if args: snip += '"""'

#snip += ""
write_init_body(args, snip)
`
${3}
endsnippet

snippet cl "class with docstrings" !bs
class ${1:MyClass}(${2:object}):
	"""${3:Docstring for $1 }"""
    $0
endsnippet

snippet cln "class with nothing, it's naked" bs
class ${1:MyClass}(${2:object}):
    ${3:pass}$0
endsnippet

snippet clt "unittest test case class with docstrings" bs
class Test${1:TestClass}(unittest.TestCase):
	"""${3:Docstring for $1 }"""

	def setUp(self):
		"""${4:todo: to be defined}"""
        ${5:pass}${0}
    # setUp()

	def tearDown(self):
		"""todo: to be defined"""
        pass
	# tearDown()
endsnippet

snippet dbg "logger.debug()" b
logger.debug("${1}"${2:, ${3}})${0}
endsnippet

snippet err "logger.error()" b
logger.error("${1}"${2:, ${3}})${0}
endsnippet

snippet wrn "logger.warning()" b
logger.warning("${1}"${2:, ${3}})${0}
endsnippet

snippet inf "logger.info()" b
logger.info("${1}"${2:, ${3}})${0}
endsnippet

snippet prv "<self.>_varname = <value>" b
`!p
if snip.indent:
    snip.rv = 'self.'`_${1:varname} = ${2:value}${0}
endsnippet

# Django specific
snippet djm "Django model class with docstrings" bs
class ${1:MyModel}(models.Model):
	"""${2:Docstring for $1 }"""

    ${0}
endsnippet

snippet djf "Django model field member" bs
${1:field_name} = models.${2:fieldType}(
    ${3:,}
    help_text=("${4}"),${5}
)${0}
endsnippet

snippet djv "Django view" bs
def ${1:view_name}(req${2:, kwargs}):
    $0
	return render(req, "template_name.html", {})
endsnippet

snippet djcv "Class Based View" bs
class ${1:ViewName}(${2:View}):

    def get(self, req${4}):
        ${0}
        return render(req, "template_name.html", {})
    # get()
endsnippet


# snippet pa "Print arg 'arg: %s'" i
# ${1:arg}: %s`!p
# names = get_arg_names(t[1])
# snip.rv += names`${0}
# endsnippet

snippet pa "Print arg 'arg: %s'" i
${1:arg}: %s${0}
endsnippet

# Find the class name and method name and
# create a nice super call
snippet sup "super(Class, self)." b!
super(${1:`!p snip.rv += find_def_name("class ")`}, self).${2:`!p snip.rv += find_def_name("def ")`}(${3:`!p snip.rv += get_nearest_def_args(strip_self=True)`})${0}
endsnippet

snippet optpar "option parser" b!
from optparse import OptionParser

opt_parser = OptionParser(                                                                          
    usage=("usage: %prog Add your help message here.")
)     

# A basic option that sets an option variable to a string value
opt_parser.add_option("-c", "--config", dest="config_file",                 
        default="",                                           
        help=("The path to the config file for this"        
            " program"))   

# An example of a boolean option
opt_parser.add_option("-d", "--daemonize", dest="daemonize",                
        action="store_true", default=False,                   
        help=("Have the program service daemonize itself" )
)

# 'options' is an object that allows easy referencing of the
# parser options added above.
# Ex: To the the value of the '--config' option refercence: options.config_file
# 'args' is a list of arguments given that aren't part of the option switches
# defined above.
# Ex: If the command '$ command --config=/path/to/config start' is called
# Then args would look like: ['start']
(options, args) = opt_parser.parse_args()
endsnippet


snippet argparse "argument parsing basic code" !b
import argparse

parser = argparse.ArgumentParser(
    "program_name",
    description=("Description of program")
)

parser.add_argument('-t', '--test',
                    default='default_value',
                    help=("Some nice help for this option")
                    )

parser.add_argument('-b',
                    '--boolean-option',
                    default=False, action='store_true',
                    help=("Some nice help for this option")
                    )

# positional argument
parser.add_argument('pos',
                    default=None,
                    nargs="?",
                    help=("Some nice help for this option")
                    )

args = parser.parse_args()
endsnippet

snippet .fm "Python str.format()" !i
.format(${1})${0}
endsnippet

#snippet test
#test `!p snip.rv += get_nearest_def_args()`
#endsnippet

snippet { "Dict" !its
{${1}: ${2}, ${4}}${0}
endsnippet

snippet di "Dict Item 'name': val," !i
'${1:name}': ${2:val}${3:,}${0}
endsnippet

snippet ifmain "My ifmain" !bts
def main():
    $0

if __name__ == '__main__':
    ${1:main()}${2}
endsnippet

snippet #! "#!/usr/bin/env python" !bts
#!/usr/bin/env python
# encoding: utf-8
`!p import datetime
if not snip.c:
	snip.rv = "# " + str(datetime.datetime.now())`
endsnippet

snippet tdir "this_dir" !b
this_dir = os.path.realpath(os.path.dirname(__file__))
endsnippet

# vim:ft=snippets:
